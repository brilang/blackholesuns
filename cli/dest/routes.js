"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const common_1 = require("common");
/*
 * Demonstrates finding best route when there are multiple possible starting points.
 */
//const POILuberndPloygi = coordinates("0AD5:007C:03AB:0065");
//const POIHusker = coordinates("0872:007C:0108:01F1");
const allBases = immutable_1.List([
    { label: "Hermit's Home", coords: common_1.coordinates("0164:007E:0596:0021") },
    { label: "Hermit's Lost Diplos", coords: common_1.coordinates("0163:007E:0595:01DE") },
    { label: "Gek Shrine [700K]", coords: common_1.coordinates("0B39:007C:01FD:0079") },
    { label: "Vykeen Shrine [800k]", coords: common_1.coordinates("0DCD:0082:0D18:0010") },
    {
        coords: common_1.coordinates("042F:0078:0D55:003C"),
        label: "Hermit's Haulers at the Hub",
    },
    {
        coords: common_1.coordinates("0476:0080:0D42:01EB"),
        label: "Hermit's Big Boy Base",
    },
    { label: "Glitching Moon Mine", coords: common_1.coordinates("00A2:0080:0550:00FD") },
]);
const newLennon = {
    coords: common_1.coordinates("042F:0079:0D55:006A"),
    label: "New Lennon",
};
const dopeLordConfederacy = {
    coords: common_1.coordinates("0804:007B:0804:008B"),
    label: "The Dopelord Confederacy",
};
const pilgrimStar = {
    coords: common_1.coordinates("064A:0082:01B9:009A"),
    label: "The Pilgrim Star",
};
// const platform = Platform.PC;
const galaxy = "01 Euclid";
const allHops = common_1.validHops()
    .filter(hop => hop.platform === common_1.Platform.PC || hop.platform === common_1.Platform.XBOX)
    .filter(hop => hop.galaxy === galaxy);
async function main() {
    const start = pilgrimStar;
    //const start = { label: "Hermit's Home", coords: coordinates("0164:007E:0596:0021") };
    const dest = {
        coords: common_1.coordinates("042F:0079:0D55:006A"),
        label: "New Lennon",
    };
    //const dest = dopeLordConfederacy;
    const ta = new common_1.TripAdvisor(common_1.routeCalculator(allHops, 2000, 0.93), start, dest);
    const r = await ta.route();
    console.log(r.start);
    console.log(r.score);
    console.log(r.destination);
    console.log(r.hops.toArray());
    await ta.explain();
}
main().catch(error => {
    console.error(`${error}`);
    process.exit(1);
});
// const best: List<TripAdvisor> = allBases
//     .map(start => {
//         return new TripAdvisor(new RouteCalculator(allHops), start, destination);
//     });
//     const x = Promise.all(best.map(ta => ta.route())).then(routes => {
//        const ta =  List(routes).minBy(route => route.score);
//     }).catch(error => console.log(`ERROR: ${error}`));
//     // .map(ta => {
//     //     return ta.route();
//     // })!;
// best.explain();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFpQztBQUVqQyxtQ0FBd0c7QUFFeEc7O0dBRUc7QUFFSCw4REFBOEQ7QUFDOUQsdURBQXVEO0FBRXZELE1BQU0sUUFBUSxHQUFvQixnQkFBSSxDQUFDO0lBQ25DLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQ3RFLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7SUFDN0UsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUMsRUFBRTtJQUMxRSxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQzdFO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLDZCQUE2QjtLQUN2QztJQUNEO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLHVCQUF1QjtLQUNqQztJQUNELEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7Q0FDL0UsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQWM7SUFDekIsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLFlBQVk7Q0FDdEIsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQWM7SUFDbkMsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLDBCQUEwQjtDQUNwQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQWM7SUFDM0IsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLGtCQUFrQjtDQUM1QixDQUFDO0FBRUYsZ0NBQWdDO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQztBQUUzQixNQUFNLE9BQU8sR0FBVSxrQkFBUyxFQUFFO0tBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssaUJBQVEsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksQ0FBQztLQUM3RSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBRTFDLEtBQUssVUFBVSxJQUFJO0lBQ2YsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDO0lBQzFCLHVGQUF1RjtJQUV2RixNQUFNLElBQUksR0FBRztRQUNULE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDO1FBQzFDLEtBQUssRUFBRSxZQUFZO0tBQ3RCLENBQUM7SUFDRixtQ0FBbUM7SUFDbkMsTUFBTSxFQUFFLEdBQUcsSUFBSSxvQkFBVyxDQUFDLHdCQUFlLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFOUUsTUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFOUIsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRUgsMkNBQTJDO0FBQzNDLHNCQUFzQjtBQUN0QixvRkFBb0Y7QUFDcEYsVUFBVTtBQUVWLHlFQUF5RTtBQUN6RSwrREFBK0Q7QUFDL0QseURBQXlEO0FBQ3pELHNCQUFzQjtBQUN0QixnQ0FBZ0M7QUFDaEMsY0FBYztBQUVkLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpc3QgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5cbmltcG9ydCB7IGNvb3JkaW5hdGVzLCBQbGF0Zm9ybSwgcm91dGVDYWxjdWxhdG9yLCBJRW5kUG9pbnQsIFRyaXBBZHZpc29yLCB2YWxpZEhvcHMsIEhvcCB9IGZyb20gXCJjb21tb25cIjtcblxuLypcbiAqIERlbW9uc3RyYXRlcyBmaW5kaW5nIGJlc3Qgcm91dGUgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9zc2libGUgc3RhcnRpbmcgcG9pbnRzLlxuICovXG5cbi8vY29uc3QgUE9JTHViZXJuZFBsb3lnaSA9IGNvb3JkaW5hdGVzKFwiMEFENTowMDdDOjAzQUI6MDA2NVwiKTtcbi8vY29uc3QgUE9JSHVza2VyID0gY29vcmRpbmF0ZXMoXCIwODcyOjAwN0M6MDEwODowMUYxXCIpO1xuXG5jb25zdCBhbGxCYXNlczogTGlzdDxJRW5kUG9pbnQ+ID0gTGlzdChbXG4gICAgeyBsYWJlbDogXCJIZXJtaXQncyBIb21lXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwMTY0OjAwN0U6MDU5NjowMDIxXCIpIH0sXG4gICAgeyBsYWJlbDogXCJIZXJtaXQncyBMb3N0IERpcGxvc1wiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDE2MzowMDdFOjA1OTU6MDFERVwiKSB9LFxuICAgIHsgbGFiZWw6IFwiR2VrIFNocmluZSBbNzAwS11cIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjBCMzk6MDA3QzowMUZEOjAwNzlcIikgfSxcbiAgICB7IGxhYmVsOiBcIlZ5a2VlbiBTaHJpbmUgWzgwMGtdXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwRENEOjAwODI6MEQxODowMDEwXCIpIH0sXG4gICAge1xuICAgICAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDQyRjowMDc4OjBENTU6MDAzQ1wiKSxcbiAgICAgICAgbGFiZWw6IFwiSGVybWl0J3MgSGF1bGVycyBhdCB0aGUgSHViXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwNDc2OjAwODA6MEQ0MjowMUVCXCIpLFxuICAgICAgICBsYWJlbDogXCJIZXJtaXQncyBCaWcgQm95IEJhc2VcIixcbiAgICB9LFxuICAgIHsgbGFiZWw6IFwiR2xpdGNoaW5nIE1vb24gTWluZVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDBBMjowMDgwOjA1NTA6MDBGRFwiKSB9LFxuXSk7XG5cbmNvbnN0IG5ld0xlbm5vbjogSUVuZFBvaW50ID0ge1xuICAgIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwNDJGOjAwNzk6MEQ1NTowMDZBXCIpLFxuICAgIGxhYmVsOiBcIk5ldyBMZW5ub25cIixcbn07XG5cbmNvbnN0IGRvcGVMb3JkQ29uZmVkZXJhY3k6IElFbmRQb2ludCA9IHtcbiAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDgwNDowMDdCOjA4MDQ6MDA4QlwiKSxcbiAgICBsYWJlbDogXCJUaGUgRG9wZWxvcmQgQ29uZmVkZXJhY3lcIixcbn07XG5cbmNvbnN0IHBpbGdyaW1TdGFyOiBJRW5kUG9pbnQgPSB7XG4gICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA2NEE6MDA4MjowMUI5OjAwOUFcIiksXG4gICAgbGFiZWw6IFwiVGhlIFBpbGdyaW0gU3RhclwiLFxufTtcblxuLy8gY29uc3QgcGxhdGZvcm0gPSBQbGF0Zm9ybS5QQztcbmNvbnN0IGdhbGF4eSA9IFwiMDEgRXVjbGlkXCI7XG5cbmNvbnN0IGFsbEhvcHM6IEhvcFtdID0gdmFsaWRIb3BzKClcbiAgICAuZmlsdGVyKGhvcCA9PiBob3AucGxhdGZvcm0gPT09IFBsYXRmb3JtLlBDIHx8IGhvcC5wbGF0Zm9ybSA9PT0gUGxhdGZvcm0uWEJPWClcbiAgICAuZmlsdGVyKGhvcCA9PiBob3AuZ2FsYXh5ID09PSBnYWxheHkpO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gcGlsZ3JpbVN0YXI7XG4gICAgLy9jb25zdCBzdGFydCA9IHsgbGFiZWw6IFwiSGVybWl0J3MgSG9tZVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDE2NDowMDdFOjA1OTY6MDAyMVwiKSB9O1xuXG4gICAgY29uc3QgZGVzdCA9IHtcbiAgICAgICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA0MkY6MDA3OTowRDU1OjAwNkFcIiksXG4gICAgICAgIGxhYmVsOiBcIk5ldyBMZW5ub25cIixcbiAgICB9O1xuICAgIC8vY29uc3QgZGVzdCA9IGRvcGVMb3JkQ29uZmVkZXJhY3k7XG4gICAgY29uc3QgdGEgPSBuZXcgVHJpcEFkdmlzb3Iocm91dGVDYWxjdWxhdG9yKGFsbEhvcHMsIDIwMDAsIDAuOTMpLCBzdGFydCwgZGVzdCk7XG5cbiAgICBjb25zdCByID0gYXdhaXQgdGEucm91dGUoKTtcblxuICAgIGNvbnNvbGUubG9nKHIuc3RhcnQpO1xuICAgIGNvbnNvbGUubG9nKHIuc2NvcmUpO1xuICAgIGNvbnNvbGUubG9nKHIuZGVzdGluYXRpb24pO1xuICAgIGNvbnNvbGUubG9nKHIuaG9wcy50b0FycmF5KCkpO1xuXG4gICAgYXdhaXQgdGEuZXhwbGFpbigpO1xufVxuXG5tYWluKCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYCR7ZXJyb3J9YCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufSk7XG5cbi8vIGNvbnN0IGJlc3Q6IExpc3Q8VHJpcEFkdmlzb3I+ID0gYWxsQmFzZXNcbi8vICAgICAubWFwKHN0YXJ0ID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG5ldyBUcmlwQWR2aXNvcihuZXcgUm91dGVDYWxjdWxhdG9yKGFsbEhvcHMpLCBzdGFydCwgZGVzdGluYXRpb24pO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgY29uc3QgeCA9IFByb21pc2UuYWxsKGJlc3QubWFwKHRhID0+IHRhLnJvdXRlKCkpKS50aGVuKHJvdXRlcyA9PiB7XG4vLyAgICAgICAgY29uc3QgdGEgPSAgTGlzdChyb3V0ZXMpLm1pbkJ5KHJvdXRlID0+IHJvdXRlLnNjb3JlKTtcbi8vICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhgRVJST1I6ICR7ZXJyb3J9YCkpO1xuLy8gICAgIC8vIC5tYXAodGEgPT4ge1xuLy8gICAgIC8vICAgICByZXR1cm4gdGEucm91dGUoKTtcbi8vICAgICAvLyB9KSE7XG5cbi8vIGJlc3QuZXhwbGFpbigpO1xuIl19