"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const csv_parse_1 = require("csv-parse");
const event_stream_1 = __importDefault(require("event-stream"));
// function handler(
//   data: string[],
//   callback: (error: any, data: string | null) => void
// ): void {
//   try {
//     console.error(data[1]);
//     const line = `${JSON.stringify(data)}\n`;
//     callback(null, line);
//   } catch (e) {
//     callback(e, null);
//   }
// }
process.stdin.setEncoding("utf8");
const p = new csv_parse_1.Parser({ delimiter: "," });
const bhData = new Promise((resolve, reject) => {
    process.stdin.pipe(p).pipe(event_stream_1.default.writeArray((err, array) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(array);
        }
    }));
});
async function generate() {
    const rows = await bhData;
    console.info("/*");
    console.info(" * This code is generated by parse-bhs.ts; changes will be overwritten.");
    console.info(` * There are a total of ${rows.length - 1} black hole data rows (before checks).`);
    console.info(" */");
    console.info("export const blackHoleData: string[][] = [");
    for (const row of rows.slice(1)) {
        console.info(`  ${JSON.stringify(row, null, "  ")
            .split("\n")
            .join("\n    ")},`);
    }
    console.info("];");
}
generate().catch((error) => {
    console.error(`[ERROR] ${error.message}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtYmhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BhcnNlLWJocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlDQUFtQztBQUNuQyxnRUFBOEI7QUFFOUIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQix3REFBd0Q7QUFDeEQsWUFBWTtBQUNaLFVBQVU7QUFDViw4QkFBOEI7QUFDOUIsZ0RBQWdEO0FBQ2hELDRCQUE0QjtBQUM1QixrQkFBa0I7QUFDbEIseUJBQXlCO0FBQ3pCLE1BQU07QUFDTixJQUFJO0FBRUosT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFbEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxrQkFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFFekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFtQyxFQUFFLE1BQTRCLEVBQUUsRUFBRTtJQUM3RixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RCLHNCQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBUSxFQUFFLEtBQWlCLEVBQUUsRUFBRTtRQUMxQyxJQUFJLEdBQUcsRUFBRTtZQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNmO2FBQU07WUFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7SUFDTCxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLFVBQVUsUUFBUTtJQUNuQixNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQztJQUUxQixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMseUVBQXlFLENBQUMsQ0FBQztJQUN4RixPQUFPLENBQUMsSUFBSSxDQUFDLDJCQUEyQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUNqRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUMzRCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FDUixLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7YUFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQzthQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUN6QixDQUFDO0tBQ0w7SUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlciB9IGZyb20gXCJjc3YtcGFyc2VcIjtcbmltcG9ydCBlcyBmcm9tIFwiZXZlbnQtc3RyZWFtXCI7XG5cbi8vIGZ1bmN0aW9uIGhhbmRsZXIoXG4vLyAgIGRhdGE6IHN0cmluZ1tdLFxuLy8gICBjYWxsYmFjazogKGVycm9yOiBhbnksIGRhdGE6IHN0cmluZyB8IG51bGwpID0+IHZvaWRcbi8vICk6IHZvaWQge1xuLy8gICB0cnkge1xuLy8gICAgIGNvbnNvbGUuZXJyb3IoZGF0YVsxXSk7XG4vLyAgICAgY29uc3QgbGluZSA9IGAke0pTT04uc3RyaW5naWZ5KGRhdGEpfVxcbmA7XG4vLyAgICAgY2FsbGJhY2sobnVsbCwgbGluZSk7XG4vLyAgIH0gY2F0Y2ggKGUpIHtcbi8vICAgICBjYWxsYmFjayhlLCBudWxsKTtcbi8vICAgfVxuLy8gfVxuXG5wcm9jZXNzLnN0ZGluLnNldEVuY29kaW5nKFwidXRmOFwiKTtcblxuY29uc3QgcCA9IG5ldyBQYXJzZXIoeyBkZWxpbWl0ZXI6IFwiLFwiIH0pO1xuXG5jb25zdCBiaERhdGEgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZTogKHJvd3M6IHN0cmluZ1tdW10pID0+IHZvaWQsIHJlamVjdDogKGVycm9yOiBhbnkpID0+IHZvaWQpID0+IHtcbiAgICBwcm9jZXNzLnN0ZGluLnBpcGUocCkucGlwZShcbiAgICAgICAgZXMud3JpdGVBcnJheSgoZXJyOiBhbnksIGFycmF5OiBzdHJpbmdbXVtdKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgcm93cyA9IGF3YWl0IGJoRGF0YTtcblxuICAgIGNvbnNvbGUuaW5mbyhcIi8qXCIpO1xuICAgIGNvbnNvbGUuaW5mbyhcIiAqIFRoaXMgY29kZSBpcyBnZW5lcmF0ZWQgYnkgcGFyc2UtYmhzLnRzOyBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXCIpO1xuICAgIGNvbnNvbGUuaW5mbyhgICogVGhlcmUgYXJlIGEgdG90YWwgb2YgJHtyb3dzLmxlbmd0aCAtIDF9IGJsYWNrIGhvbGUgZGF0YSByb3dzIChiZWZvcmUgY2hlY2tzKS5gKTtcbiAgICBjb25zb2xlLmluZm8oXCIgKi9cIik7XG4gICAgY29uc29sZS5pbmZvKFwiZXhwb3J0IGNvbnN0IGJsYWNrSG9sZURhdGE6IHN0cmluZ1tdW10gPSBbXCIpO1xuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3Muc2xpY2UoMSkpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICAgICAgYCAgJHtKU09OLnN0cmluZ2lmeShyb3csIG51bGwsIFwiICBcIilcbiAgICAgICAgICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcbiAgICBcIil9LGBcbiAgICAgICAgKTtcbiAgICB9XG4gICAgY29uc29sZS5pbmZvKFwiXTtcIik7XG59XG5cbmdlbmVyYXRlKCkuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYFtFUlJPUl0gJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuIl19