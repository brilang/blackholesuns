"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const common_1 = require("common");
/*
 * Demonstrates finding best route when there are multiple possible starting points.
 */
//const POILuberndPloygi = coordinates("0AD5:007C:03AB:0065");
//const POIHusker = coordinates("0872:007C:0108:01F1");
const allBases = immutable_1.List([
    { label: "Hermit's Home", coords: common_1.coordinates("0164:007E:0596:0021") },
    { label: "Hermit's Lost Diplos", coords: common_1.coordinates("0163:007E:0595:01DE") },
    { label: "Gek Shrine [700K]", coords: common_1.coordinates("0B39:007C:01FD:0079") },
    { label: "Vykeen Shrine [800k]", coords: common_1.coordinates("0DCD:0082:0D18:0010") },
    {
        coords: common_1.coordinates("042F:0078:0D55:003C"),
        label: "Hermit's Haulers at the Hub",
    },
    {
        coords: common_1.coordinates("0476:0080:0D42:01EB"),
        label: "Hermit's Big Boy Base",
    },
    { label: "Glitching Moon Mine", coords: common_1.coordinates("00A2:0080:0550:00FD") },
]);
const newLennon = {
    coords: common_1.coordinates("042F:0079:0D55:006A"),
    label: "New Lennon",
};
const dopeLordConfederacy = {
    coords: common_1.coordinates("0804:007B:0804:008B"),
    label: "The Dopelord Confederacy",
};
const pilgrimStar = {
    coords: common_1.coordinates("064A:0082:01B9:009A"),
    label: "The Pilgrim Star",
};
// const platform = Platform.PC;
const galaxy = "01 Euclid";
const allHops = common_1.validHops()
    .filter(hop => hop.platform === common_1.Platform.PC || hop.platform === common_1.Platform.XBOX)
    .filter(hop => hop.galaxy === galaxy);
async function main() {
    //const start = pilgrimStar;
    const start = { label: "an exit point", coords: common_1.coordinates("093E:007D:0966:006D") };
    //const start = { label: "Hermit's Home", coords: coordinates("0164:007E:0596:0021") };
    // const dest = {
    //     coords: coordinates("042F:0079:0D55:006A"),
    //     label: "New Lennon",
    // };
    //const dest = dopeLordConfederacy;
    const dest = {
        coords: common_1.coordinates("0643:0081:01A1:0079"),
        label: "Durs Sigma",
    };
    const status = { cancelled: false, tries: 0 };
    const ta = new common_1.TripAdvisor(common_1.routeCalculator(allHops, 2000, "time", 0.93), start, dest, status);
    const r = await ta.route();
    console.log(r.start);
    console.log(r.score);
    console.log(r.destination);
    console.log(r.hops.toArray());
    await ta.explain();
}
main().catch(error => {
    console.error(`${error}`);
    process.exit(1);
});
// const best: List<TripAdvisor> = allBases
//     .map(start => {
//         return new TripAdvisor(new RouteCalculator(allHops), start, destination);
//     });
//     const x = Promise.all(best.map(ta => ta.route())).then(routes => {
//        const ta =  List(routes).minBy(route => route.score);
//     }).catch(error => console.log(`ERROR: ${error}`));
//     // .map(ta => {
//     //     return ta.route();
//     // })!;
// best.explain();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFpQztBQUNqQyxtQ0FBcUg7QUFFckg7O0dBRUc7QUFFSCw4REFBOEQ7QUFDOUQsdURBQXVEO0FBRXZELE1BQU0sUUFBUSxHQUFvQixnQkFBSSxDQUFDO0lBQ25DLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQ3RFLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7SUFDN0UsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUMsRUFBRTtJQUMxRSxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQzdFO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLDZCQUE2QjtLQUN2QztJQUNEO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLHVCQUF1QjtLQUNqQztJQUNELEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7Q0FDL0UsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQWM7SUFDekIsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLFlBQVk7Q0FDdEIsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQWM7SUFDbkMsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLDBCQUEwQjtDQUNwQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQWM7SUFDM0IsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLGtCQUFrQjtDQUM1QixDQUFDO0FBRUYsZ0NBQWdDO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQztBQUUzQixNQUFNLE9BQU8sR0FBVSxrQkFBUyxFQUFFO0tBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssaUJBQVEsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksQ0FBQztLQUM3RSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBRTFDLEtBQUssVUFBVSxJQUFJO0lBQ2YsNEJBQTRCO0lBQzVCLE1BQU0sS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7SUFDckYsdUZBQXVGO0lBRXZGLGlCQUFpQjtJQUNqQixrREFBa0Q7SUFDbEQsMkJBQTJCO0lBQzNCLEtBQUs7SUFDTCxtQ0FBbUM7SUFDbkMsTUFBTSxJQUFJLEdBQUc7UUFDVCxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQztRQUMxQyxLQUFLLEVBQUUsWUFBWTtLQUN0QixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQWdCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFFM0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxvQkFBVyxDQUFDLHdCQUFlLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUU5RixNQUFNLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUUzQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUU5QixNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBRUQsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFFSCwyQ0FBMkM7QUFDM0Msc0JBQXNCO0FBQ3RCLG9GQUFvRjtBQUNwRixVQUFVO0FBRVYseUVBQXlFO0FBQ3pFLCtEQUErRDtBQUMvRCx5REFBeUQ7QUFDekQsc0JBQXNCO0FBQ3RCLGdDQUFnQztBQUNoQyxjQUFjO0FBRWQsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCB7IGNvb3JkaW5hdGVzLCBQbGF0Zm9ybSwgcm91dGVDYWxjdWxhdG9yLCBJRW5kUG9pbnQsIElUcmlwU3RhdHVzLCBUcmlwQWR2aXNvciwgdmFsaWRIb3BzLCBIb3AgfSBmcm9tIFwiY29tbW9uXCI7XG5cbi8qXG4gKiBEZW1vbnN0cmF0ZXMgZmluZGluZyBiZXN0IHJvdXRlIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHBvc3NpYmxlIHN0YXJ0aW5nIHBvaW50cy5cbiAqL1xuXG4vL2NvbnN0IFBPSUx1YmVybmRQbG95Z2kgPSBjb29yZGluYXRlcyhcIjBBRDU6MDA3QzowM0FCOjAwNjVcIik7XG4vL2NvbnN0IFBPSUh1c2tlciA9IGNvb3JkaW5hdGVzKFwiMDg3MjowMDdDOjAxMDg6MDFGMVwiKTtcblxuY29uc3QgYWxsQmFzZXM6IExpc3Q8SUVuZFBvaW50PiA9IExpc3QoW1xuICAgIHsgbGFiZWw6IFwiSGVybWl0J3MgSG9tZVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDE2NDowMDdFOjA1OTY6MDAyMVwiKSB9LFxuICAgIHsgbGFiZWw6IFwiSGVybWl0J3MgTG9zdCBEaXBsb3NcIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjAxNjM6MDA3RTowNTk1OjAxREVcIikgfSxcbiAgICB7IGxhYmVsOiBcIkdlayBTaHJpbmUgWzcwMEtdXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwQjM5OjAwN0M6MDFGRDowMDc5XCIpIH0sXG4gICAgeyBsYWJlbDogXCJWeWtlZW4gU2hyaW5lIFs4MDBrXVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMERDRDowMDgyOjBEMTg6MDAxMFwiKSB9LFxuICAgIHtcbiAgICAgICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA0MkY6MDA3ODowRDU1OjAwM0NcIiksXG4gICAgICAgIGxhYmVsOiBcIkhlcm1pdCdzIEhhdWxlcnMgYXQgdGhlIEh1YlwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDQ3NjowMDgwOjBENDI6MDFFQlwiKSxcbiAgICAgICAgbGFiZWw6IFwiSGVybWl0J3MgQmlnIEJveSBCYXNlXCIsXG4gICAgfSxcbiAgICB7IGxhYmVsOiBcIkdsaXRjaGluZyBNb29uIE1pbmVcIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjAwQTI6MDA4MDowNTUwOjAwRkRcIikgfSxcbl0pO1xuXG5jb25zdCBuZXdMZW5ub246IElFbmRQb2ludCA9IHtcbiAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDQyRjowMDc5OjBENTU6MDA2QVwiKSxcbiAgICBsYWJlbDogXCJOZXcgTGVubm9uXCIsXG59O1xuXG5jb25zdCBkb3BlTG9yZENvbmZlZGVyYWN5OiBJRW5kUG9pbnQgPSB7XG4gICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA4MDQ6MDA3QjowODA0OjAwOEJcIiksXG4gICAgbGFiZWw6IFwiVGhlIERvcGVsb3JkIENvbmZlZGVyYWN5XCIsXG59O1xuXG5jb25zdCBwaWxncmltU3RhcjogSUVuZFBvaW50ID0ge1xuICAgIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwNjRBOjAwODI6MDFCOTowMDlBXCIpLFxuICAgIGxhYmVsOiBcIlRoZSBQaWxncmltIFN0YXJcIixcbn07XG5cbi8vIGNvbnN0IHBsYXRmb3JtID0gUGxhdGZvcm0uUEM7XG5jb25zdCBnYWxheHkgPSBcIjAxIEV1Y2xpZFwiO1xuXG5jb25zdCBhbGxIb3BzOiBIb3BbXSA9IHZhbGlkSG9wcygpXG4gICAgLmZpbHRlcihob3AgPT4gaG9wLnBsYXRmb3JtID09PSBQbGF0Zm9ybS5QQyB8fCBob3AucGxhdGZvcm0gPT09IFBsYXRmb3JtLlhCT1gpXG4gICAgLmZpbHRlcihob3AgPT4gaG9wLmdhbGF4eSA9PT0gZ2FsYXh5KTtcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvL2NvbnN0IHN0YXJ0ID0gcGlsZ3JpbVN0YXI7XG4gICAgY29uc3Qgc3RhcnQgPSB7IGxhYmVsOiBcImFuIGV4aXQgcG9pbnRcIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjA5M0U6MDA3RDowOTY2OjAwNkRcIikgfTtcbiAgICAvL2NvbnN0IHN0YXJ0ID0geyBsYWJlbDogXCJIZXJtaXQncyBIb21lXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwMTY0OjAwN0U6MDU5NjowMDIxXCIpIH07XG5cbiAgICAvLyBjb25zdCBkZXN0ID0ge1xuICAgIC8vICAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDQyRjowMDc5OjBENTU6MDA2QVwiKSxcbiAgICAvLyAgICAgbGFiZWw6IFwiTmV3IExlbm5vblwiLFxuICAgIC8vIH07XG4gICAgLy9jb25zdCBkZXN0ID0gZG9wZUxvcmRDb25mZWRlcmFjeTtcbiAgICBjb25zdCBkZXN0ID0ge1xuICAgICAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDY0MzowMDgxOjAxQTE6MDA3OVwiKSxcbiAgICAgICAgbGFiZWw6IFwiRHVycyBTaWdtYVwiLFxuICAgIH07XG5cbiAgICBjb25zdCBzdGF0dXM6IElUcmlwU3RhdHVzID0geyBjYW5jZWxsZWQ6IGZhbHNlLCB0cmllczogMCB9O1xuXG4gICAgY29uc3QgdGEgPSBuZXcgVHJpcEFkdmlzb3Iocm91dGVDYWxjdWxhdG9yKGFsbEhvcHMsIDIwMDAsIFwidGltZVwiLCAwLjkzKSwgc3RhcnQsIGRlc3QsIHN0YXR1cyk7XG5cbiAgICBjb25zdCByID0gYXdhaXQgdGEucm91dGUoKTtcblxuICAgIGNvbnNvbGUubG9nKHIuc3RhcnQpO1xuICAgIGNvbnNvbGUubG9nKHIuc2NvcmUpO1xuICAgIGNvbnNvbGUubG9nKHIuZGVzdGluYXRpb24pO1xuICAgIGNvbnNvbGUubG9nKHIuaG9wcy50b0FycmF5KCkpO1xuXG4gICAgYXdhaXQgdGEuZXhwbGFpbigpO1xufVxuXG5tYWluKCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYCR7ZXJyb3J9YCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufSk7XG5cbi8vIGNvbnN0IGJlc3Q6IExpc3Q8VHJpcEFkdmlzb3I+ID0gYWxsQmFzZXNcbi8vICAgICAubWFwKHN0YXJ0ID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG5ldyBUcmlwQWR2aXNvcihuZXcgUm91dGVDYWxjdWxhdG9yKGFsbEhvcHMpLCBzdGFydCwgZGVzdGluYXRpb24pO1xuLy8gICAgIH0pO1xuXG4vLyAgICAgY29uc3QgeCA9IFByb21pc2UuYWxsKGJlc3QubWFwKHRhID0+IHRhLnJvdXRlKCkpKS50aGVuKHJvdXRlcyA9PiB7XG4vLyAgICAgICAgY29uc3QgdGEgPSAgTGlzdChyb3V0ZXMpLm1pbkJ5KHJvdXRlID0+IHJvdXRlLnNjb3JlKTtcbi8vICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhgRVJST1I6ICR7ZXJyb3J9YCkpO1xuLy8gICAgIC8vIC5tYXAodGEgPT4ge1xuLy8gICAgIC8vICAgICByZXR1cm4gdGEucm91dGUoKTtcbi8vICAgICAvLyB9KSE7XG5cbi8vIGJlc3QuZXhwbGFpbigpO1xuIl19