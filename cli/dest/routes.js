"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const common_1 = require("common");
/*
 * Demonstrates finding best route when there are multiple possible starting points.
 */
//const POILuberndPloygi = coordinates("0AD5:007C:03AB:0065");
//const POIHusker = coordinates("0872:007C:0108:01F1");
const allBases = immutable_1.List([
    { label: "Hermit's Home", coords: common_1.coordinates("0164:007E:0596:0021") },
    { label: "Hermit's Lost Diplos", coords: common_1.coordinates("0163:007E:0595:01DE") },
    { label: "Gek Shrine [700K]", coords: common_1.coordinates("0B39:007C:01FD:0079") },
    { label: "Vykeen Shrine [800k]", coords: common_1.coordinates("0DCD:0082:0D18:0010") },
    {
        coords: common_1.coordinates("042F:0078:0D55:003C"),
        label: "Hermit's Haulers at the Hub",
    },
    {
        coords: common_1.coordinates("0476:0080:0D42:01EB"),
        label: "Hermit's Big Boy Base",
    },
    { label: "Glitching Moon Mine", coords: common_1.coordinates("00A2:0080:0550:00FD") },
]);
const newLennon = {
    coords: common_1.coordinates("042F:0079:0D55:006A"),
    label: "New Lennon",
};
const dopeLordConfederacy = {
    coords: common_1.coordinates("0804:007B:0804:008B"),
    label: "The Dopelord Confederacy",
};
const pilgrimStar = {
    coords: common_1.coordinates("064A:0082:01B9:009A"),
    label: "The Pilgrim Star",
};
// const platform = Platform.PC;
const galaxy = "01 Euclid";
const allHops = common_1.validHops()
    .filter(hop => hop.platform === common_1.Platform.PC || hop.platform === common_1.Platform.XBOX)
    .filter(hop => hop.galaxy === galaxy);
async function main() {
    //const start = pilgrimStar;
    const start = { label: "an exit point", coords: common_1.coordinates("093E:007D:0966:006D") };
    //const start = { label: "Hermit's Home", coords: coordinates("0164:007E:0596:0021") };
    const dest = {
        coords: common_1.coordinates("042F:0079:0D55:006A"),
        label: "New Lennon",
    };
    //const dest = dopeLordConfederacy;
    const status = { cancelled: false, tries: 0 };
    const ta = new common_1.TripAdvisor(common_1.routeCalculator(allHops, 2000, 0.93), start, dest, status);
    const r = await ta.route();
    console.log(r.start);
    console.log(r.score);
    console.log(r.destination);
    console.log(r.hops.toArray());
    await ta.explain();
}
main().catch(error => {
    console.error(`${error}`);
    process.exit(1);
});
// const best: List<TripAdvisor> = allBases
//     .map(start => {
//         return new TripAdvisor(new RouteCalculator(allHops), start, destination);
//     });
//     const x = Promise.all(best.map(ta => ta.route())).then(routes => {
//        const ta =  List(routes).minBy(route => route.score);
//     }).catch(error => console.log(`ERROR: ${error}`));
//     // .map(ta => {
//     //     return ta.route();
//     // })!;
// best.explain();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFpQztBQUNqQyxtQ0FBcUg7QUFFckg7O0dBRUc7QUFFSCw4REFBOEQ7QUFDOUQsdURBQXVEO0FBRXZELE1BQU0sUUFBUSxHQUFvQixnQkFBSSxDQUFDO0lBQ25DLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQ3RFLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7SUFDN0UsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUMsRUFBRTtJQUMxRSxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0lBQzdFO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLDZCQUE2QjtLQUN2QztJQUNEO1FBQ0ksTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLHVCQUF1QjtLQUNqQztJQUNELEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxvQkFBVyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7Q0FDL0UsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQWM7SUFDekIsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLFlBQVk7Q0FDdEIsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQWM7SUFDbkMsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLDBCQUEwQjtDQUNwQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQWM7SUFDM0IsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7SUFDMUMsS0FBSyxFQUFFLGtCQUFrQjtDQUM1QixDQUFDO0FBRUYsZ0NBQWdDO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQztBQUUzQixNQUFNLE9BQU8sR0FBVSxrQkFBUyxFQUFFO0tBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssaUJBQVEsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksQ0FBQztLQUM3RSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBRTFDLEtBQUssVUFBVSxJQUFJO0lBQ2YsNEJBQTRCO0lBQzVCLE1BQU0sS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsb0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7SUFDckYsdUZBQXVGO0lBRXZGLE1BQU0sSUFBSSxHQUFHO1FBQ1QsTUFBTSxFQUFFLG9CQUFXLENBQUMscUJBQXFCLENBQUM7UUFDMUMsS0FBSyxFQUFFLFlBQVk7S0FDdEIsQ0FBQztJQUNGLG1DQUFtQztJQUVuQyxNQUFNLE1BQU0sR0FBZ0IsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUUzRCxNQUFNLEVBQUUsR0FBRyxJQUFJLG9CQUFXLENBQUMsd0JBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFdEYsTUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFOUIsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRUgsMkNBQTJDO0FBQzNDLHNCQUFzQjtBQUN0QixvRkFBb0Y7QUFDcEYsVUFBVTtBQUVWLHlFQUF5RTtBQUN6RSwrREFBK0Q7QUFDL0QseURBQXlEO0FBQ3pELHNCQUFzQjtBQUN0QixnQ0FBZ0M7QUFDaEMsY0FBYztBQUVkLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpc3QgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5pbXBvcnQgeyBjb29yZGluYXRlcywgUGxhdGZvcm0sIHJvdXRlQ2FsY3VsYXRvciwgSUVuZFBvaW50LCBJVHJpcFN0YXR1cywgVHJpcEFkdmlzb3IsIHZhbGlkSG9wcywgSG9wIH0gZnJvbSBcImNvbW1vblwiO1xuXG4vKlxuICogRGVtb25zdHJhdGVzIGZpbmRpbmcgYmVzdCByb3V0ZSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBwb3NzaWJsZSBzdGFydGluZyBwb2ludHMuXG4gKi9cblxuLy9jb25zdCBQT0lMdWJlcm5kUGxveWdpID0gY29vcmRpbmF0ZXMoXCIwQUQ1OjAwN0M6MDNBQjowMDY1XCIpO1xuLy9jb25zdCBQT0lIdXNrZXIgPSBjb29yZGluYXRlcyhcIjA4NzI6MDA3QzowMTA4OjAxRjFcIik7XG5cbmNvbnN0IGFsbEJhc2VzOiBMaXN0PElFbmRQb2ludD4gPSBMaXN0KFtcbiAgICB7IGxhYmVsOiBcIkhlcm1pdCdzIEhvbWVcIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjAxNjQ6MDA3RTowNTk2OjAwMjFcIikgfSxcbiAgICB7IGxhYmVsOiBcIkhlcm1pdCdzIExvc3QgRGlwbG9zXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwMTYzOjAwN0U6MDU5NTowMURFXCIpIH0sXG4gICAgeyBsYWJlbDogXCJHZWsgU2hyaW5lIFs3MDBLXVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMEIzOTowMDdDOjAxRkQ6MDA3OVwiKSB9LFxuICAgIHsgbGFiZWw6IFwiVnlrZWVuIFNocmluZSBbODAwa11cIiwgY29vcmRzOiBjb29yZGluYXRlcyhcIjBEQ0Q6MDA4MjowRDE4OjAwMTBcIikgfSxcbiAgICB7XG4gICAgICAgIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwNDJGOjAwNzg6MEQ1NTowMDNDXCIpLFxuICAgICAgICBsYWJlbDogXCJIZXJtaXQncyBIYXVsZXJzIGF0IHRoZSBIdWJcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA0NzY6MDA4MDowRDQyOjAxRUJcIiksXG4gICAgICAgIGxhYmVsOiBcIkhlcm1pdCdzIEJpZyBCb3kgQmFzZVwiLFxuICAgIH0sXG4gICAgeyBsYWJlbDogXCJHbGl0Y2hpbmcgTW9vbiBNaW5lXCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwMEEyOjAwODA6MDU1MDowMEZEXCIpIH0sXG5dKTtcblxuY29uc3QgbmV3TGVubm9uOiBJRW5kUG9pbnQgPSB7XG4gICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA0MkY6MDA3OTowRDU1OjAwNkFcIiksXG4gICAgbGFiZWw6IFwiTmV3IExlbm5vblwiLFxufTtcblxuY29uc3QgZG9wZUxvcmRDb25mZWRlcmFjeTogSUVuZFBvaW50ID0ge1xuICAgIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwODA0OjAwN0I6MDgwNDowMDhCXCIpLFxuICAgIGxhYmVsOiBcIlRoZSBEb3BlbG9yZCBDb25mZWRlcmFjeVwiLFxufTtcblxuY29uc3QgcGlsZ3JpbVN0YXI6IElFbmRQb2ludCA9IHtcbiAgICBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDY0QTowMDgyOjAxQjk6MDA5QVwiKSxcbiAgICBsYWJlbDogXCJUaGUgUGlsZ3JpbSBTdGFyXCIsXG59O1xuXG4vLyBjb25zdCBwbGF0Zm9ybSA9IFBsYXRmb3JtLlBDO1xuY29uc3QgZ2FsYXh5ID0gXCIwMSBFdWNsaWRcIjtcblxuY29uc3QgYWxsSG9wczogSG9wW10gPSB2YWxpZEhvcHMoKVxuICAgIC5maWx0ZXIoaG9wID0+IGhvcC5wbGF0Zm9ybSA9PT0gUGxhdGZvcm0uUEMgfHwgaG9wLnBsYXRmb3JtID09PSBQbGF0Zm9ybS5YQk9YKVxuICAgIC5maWx0ZXIoaG9wID0+IGhvcC5nYWxheHkgPT09IGdhbGF4eSk7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy9jb25zdCBzdGFydCA9IHBpbGdyaW1TdGFyO1xuICAgIGNvbnN0IHN0YXJ0ID0geyBsYWJlbDogXCJhbiBleGl0IHBvaW50XCIsIGNvb3JkczogY29vcmRpbmF0ZXMoXCIwOTNFOjAwN0Q6MDk2NjowMDZEXCIpIH07XG4gICAgLy9jb25zdCBzdGFydCA9IHsgbGFiZWw6IFwiSGVybWl0J3MgSG9tZVwiLCBjb29yZHM6IGNvb3JkaW5hdGVzKFwiMDE2NDowMDdFOjA1OTY6MDAyMVwiKSB9O1xuXG4gICAgY29uc3QgZGVzdCA9IHtcbiAgICAgICAgY29vcmRzOiBjb29yZGluYXRlcyhcIjA0MkY6MDA3OTowRDU1OjAwNkFcIiksXG4gICAgICAgIGxhYmVsOiBcIk5ldyBMZW5ub25cIixcbiAgICB9O1xuICAgIC8vY29uc3QgZGVzdCA9IGRvcGVMb3JkQ29uZmVkZXJhY3k7XG5cbiAgICBjb25zdCBzdGF0dXM6IElUcmlwU3RhdHVzID0geyBjYW5jZWxsZWQ6IGZhbHNlLCB0cmllczogMCB9O1xuXG4gICAgY29uc3QgdGEgPSBuZXcgVHJpcEFkdmlzb3Iocm91dGVDYWxjdWxhdG9yKGFsbEhvcHMsIDIwMDAsIDAuOTMpLCBzdGFydCwgZGVzdCwgc3RhdHVzKTtcblxuICAgIGNvbnN0IHIgPSBhd2FpdCB0YS5yb3V0ZSgpO1xuXG4gICAgY29uc29sZS5sb2coci5zdGFydCk7XG4gICAgY29uc29sZS5sb2coci5zY29yZSk7XG4gICAgY29uc29sZS5sb2coci5kZXN0aW5hdGlvbik7XG4gICAgY29uc29sZS5sb2coci5ob3BzLnRvQXJyYXkoKSk7XG5cbiAgICBhd2FpdCB0YS5leHBsYWluKCk7XG59XG5cbm1haW4oKS5jYXRjaChlcnJvciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgJHtlcnJvcn1gKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuLy8gY29uc3QgYmVzdDogTGlzdDxUcmlwQWR2aXNvcj4gPSBhbGxCYXNlc1xuLy8gICAgIC5tYXAoc3RhcnQgPT4ge1xuLy8gICAgICAgICByZXR1cm4gbmV3IFRyaXBBZHZpc29yKG5ldyBSb3V0ZUNhbGN1bGF0b3IoYWxsSG9wcyksIHN0YXJ0LCBkZXN0aW5hdGlvbik7XG4vLyAgICAgfSk7XG5cbi8vICAgICBjb25zdCB4ID0gUHJvbWlzZS5hbGwoYmVzdC5tYXAodGEgPT4gdGEucm91dGUoKSkpLnRoZW4ocm91dGVzID0+IHtcbi8vICAgICAgICBjb25zdCB0YSA9ICBMaXN0KHJvdXRlcykubWluQnkocm91dGUgPT4gcm91dGUuc2NvcmUpO1xuLy8gICAgIH0pLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGBFUlJPUjogJHtlcnJvcn1gKSk7XG4vLyAgICAgLy8gLm1hcCh0YSA9PiB7XG4vLyAgICAgLy8gICAgIHJldHVybiB0YS5yb3V0ZSgpO1xuLy8gICAgIC8vIH0pITtcblxuLy8gYmVzdC5leHBsYWluKCk7XG4iXX0=